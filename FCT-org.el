;;; export to pdf
(defun brice-org-export-to-pdf (&optional arg)
  "Export to pdf using beamer or latex depending on the mode of the org document"
  (interactive "p")
  (if org-beamer-mode
      (org-beamer-export-to-pdf)
      (org-latex-export-to-pdf))
  )

;;; export to latex
(defun brice-org-export-to-latex (&optional arg)
  "Export to latex using beamer or latex depending on the mode of the org document"
  (interactive "p")
  (if org-beamer-mode
      (org-beamer-export-to-latex)
	(org-latex-export-to-latex))
  )
(defun brice-org-run-latexmk ()
  "Open eshell and run latexmk on current org file"
  (interactive)
  (if (eq major-mode 'org-mode)
      (let ((filename (concat (file-name-sans-extension (buffer-file-name)) ".tex")))
		(let ((currentBuffer (buffer-name)))		
		  (progn (eshell 'N))
		  (insert (concat "latexmk -pvc " filename " -pdf -view=none"))
		  (eshell-send-input)
		  (switch-to-buffer  currentBuffer)
		  )
		)(message "works only with files whose major mode is org-mode"))
  ;; (let (texfile (buffer-file-name))
  ;; (progn (comint-send-input))
  ;; )
  )

;;; export to R
(defun brice-extractRchunk ()
  "Extact R code chunks from a org file and put them into a R file"
  (interactive)
  (let ((file-name (buffer-file-name)))
  (let ((x (read-string "Org file:")))
    (if(string= "" x)	
	(ess-eval-linewise (concat "butils:::extractRchunk(\"" file-name "\", overwrite = TRUE)"))
      (ess-eval-linewise (concat "butils:::extractRchunk(\"" x "\", overwrite = TRUE)"))
      )
    ))
  )


;;; open tex file
;;;; tex
;; modified from superman
(defun brice-org-open-corresponding-tex (&optional arg)
  "Open the latex file generated by the org file"
  (interactive "p")
   (let ((target (concat (file-name-sans-extension (buffer-file-name)) ".tex")))
     (if (file-exists-p target)
	 (org-open-file target)
       (message (concat "No such file: " target)))
     )
)

(defun brice-org-export-and-open-corresponding-tex (&optional arg)
  "Open the latex file generated by the org file"
  (interactive "p")
  (brice-org-export-to-pdf)
  (brice-org-open-corresponding-tex)
)

;;;; orgmode
;; modified from superman
(defun brice-org-open-corresponding-pdf (&optional arg)
  "Open the pdf file generated by the org file"
  (interactive "p")
   (let ((target (concat (file-name-sans-extension (buffer-file-name)) ".pdf")))
     (if (file-exists-p target)
	 (org-open-file target)
       (message (concat "No such file: " target)))
     ))

(defun brice-org-export-and-open-corresponding-pdf (&optional arg)
  "Open pdf file"
  (interactive "p")
  (brice-org-export-to-pdf)
  (brice-org-open-corresponding-pdf)
)

(defun brice-org-open-corresponding-preview (&optional arg)
  "Open preview of the file file"
  (interactive "p")
  (let ((target (concat (file-name-sans-extension (buffer-file-name)) ".tex")))
     (if (file-exists-p target)
	 (org-open-file target)
       (message (concat "No such file: " target)))
     )
  (TeX-view)
)

;; ;;; miscelaneous
;; (defun brice-org-remove-headlines (backend)
;;   "Remove headlines with :no_title: tag.
;;    From : https://emacs.stackexchange.com/questions/9492/is-it-possible-to-export-content-of-subtrees-without-their-headings"
;;   (org-map-entries (lambda () (delete-region (point-at-bol) (point-at-eol)))
;;                    "no_title"))

;; (add-hook 'org-export-before-processing-hook #'brice-org-remove-headlines)
